import os
import logging
import random
import datetime
import re

from flask import Flask
from threading import Thread

from telegram import (
    Update,
    BotCommand,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# ------------------------------------------------------------------------
# 1) –ß–¢–ï–ù–ò–ï –¢–û–ö–ï–ù–ê –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø
# ------------------------------------------------------------------------
BOT_TOKEN = os.getenv("token_an")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω (token_an) –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ------------------------------------------------------------------------
# 2) FLASK-–°–ï–†–í–ï–† –î–õ–Ø KEEP ALIVE
# ------------------------------------------------------------------------
app_flask = Flask(__name__)

@app_flask.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

def run_flask_server():
    port = int(os.getenv("PORT", "8080"))  # –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º —Ç–∏–ø–∞ Railway
    app_flask.run(host='0.0.0.0', port=port)

def start_keep_alive():
    thread = Thread(target=run_flask_server)
    thread.start()

# ------------------------------------------------------------------------
# 3) –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ------------------------------------------------------------------------
logging.basicConfig(
    filename='bot_activity.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)

# ------------------------------------------------------------------------
# 4) –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò –°–¢–†–£–ö–¢–£–†–´
# ------------------------------------------------------------------------
active_users = {}      # { user_id: { nickname, code, chat_id, last_active } }
user_profiles = {}     # { user_id: { nickname, code, join_count } }
exited_users = []      # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (nickname, code, time)
direct_messages = {}   # { user_id: [ { from, text }, ... ] }
notification_settings = {}  # { user_id: { privates, replies, hug, interval } }
active_polls = {}      # { creator_id: { question, options, votes, active, msg_ids, chat_ids } }
reported_messages = [] # [ { reporter, offender, reason, time } ]
admin_ids = set()
moderator_ids = set()

# ------------------------------------------------------------------------
# 5) –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ------------------------------------------------------------------------
def create_random_nickname() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞."""
    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
    return f"üÜî{''.join(random.choices(letters, k=6))}"

def create_unique_code() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ #XXXX."""
    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    return f"#{''.join(random.choices(letters, k=4))}"

def initialize_user_settings(user_id: int):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    if user_id not in direct_messages:
        direct_messages[user_id] = []
    if user_id not in notification_settings:
        notification_settings[user_id] = {
            "privates": False,
            "replies": False,
            "hug": False,
            "interval": 5,
        }

def determine_user_role(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: admin | moderator | newbie | regular."""
    if user_id in admin_ids:
        return "admin"
    if user_id in moderator_ids:
        return "moderator"
    if user_id in user_profiles:
        count = user_profiles[user_id].get("join_count", 0)
        return "newbie" if count <= 1 else "regular"
    return "newbie"

def refresh_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id in active_users:
        active_users[user_id]["last_active"] = datetime.datetime.now()

def broadcast_message(app_context, text: str, exclude_user: int = None):
    """–†–∞—Å—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ."""
    for uid, info in active_users.items():
        if uid == exclude_user:
            continue
        try:
            app_context.bot.send_message(chat_id=info["chat_id"], text=text)
        except Exception as err:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {info['nickname']}: {err}")

def broadcast_image(app_context, photo_id: str, caption: str = "", exclude_user: int = None):
    """–†–∞—Å—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ."""
    for uid, info in active_users.items():
        if uid == exclude_user:
            continue
        try:
            app_context.bot.send_photo(
                chat_id=info["chat_id"],
                photo=photo_id,
                caption=caption
            )
        except Exception as err:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {info['nickname']}: {err}")

def extract_replied_nickname(message_text: str) -> str:
    """–ò–∑–≤–ª–µ—á—å –Ω–∏–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Ñ–æ—Ä–º–∞—Ç 'Nickname: ...')."""
    match = re.match(r"^(.+?):\s", message_text)
    if match:
        return match.group(1).strip()
    return ""

# ------------------------------------------------------------------------
# 6) –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î
# ------------------------------------------------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    initialize_user_settings(user_id)

    if user_id in active_users:
        nick = active_users[user_id]["nickname"]
        await update.message.reply_text(
            f"[–ë–æ—Ç] –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º ¬´{nick}¬ª. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π /stop."
        )
        refresh_user_activity(user_id)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —Ä–∞–Ω—å—à–µ
    if user_id in user_profiles:
        nick = user_profiles[user_id]["nickname"]
        code = user_profiles[user_id]["code"]
        user_profiles[user_id]["join_count"] = user_profiles[user_id].get("join_count", 0) + 1
        join_count = user_profiles[user_id]["join_count"]
    else:
        nick = create_random_nickname()
        code = create_unique_code()
        user_profiles[user_id] = {
            "nickname": nick,
            "code": code,
            "join_count": 1
        }
        join_count = 1

    active_users[user_id] = {
        "nickname": nick,
        "code": code,
        "chat_id": chat_id,
        "last_active": datetime.datetime.now()
    }

    welcome_msg = (
        f"[–ë–æ—Ç] –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º!\n"
        f"–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º: {nick}\n"
        f"–¢–≤–æ–π –∫–æ–¥: {code}\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–±–µ—Ä–∏ /stop.\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )
    await update.message.reply_text(welcome_msg)

    if join_count == 1:
        broadcast_text = f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ] {code} {nick} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(–∞—Å—å) –∫ —á–∞—Ç—É. –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!"
    else:
        broadcast_text = f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ] {code} {nick} –≤–Ω–æ–≤—å –≤ —á–∞—Ç–µ."
    await broadcast_message(context.application, broadcast_text, exclude_user=user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({nick}), –∑–∞—Ö–æ–¥ #{join_count}.")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —á–∞—Ç–µ. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.")
        return

    nick = active_users[user_id]["nickname"]
    code = active_users[user_id]["code"]
    active_users.pop(user_id)

    exited_users.insert(0, (nick, code, datetime.datetime.now()))
    if len(exited_users) > 20:
        exited_users.pop()

    await update.message.reply_text("[–ë–æ—Ç] –¢—ã –≤—ã—à–µ–ª(–∞) –∏–∑ —á–∞—Ç–∞. –ü—Ä–∏—Ö–æ–¥–∏ –µ—â—ë!")
    await broadcast_message(context.application, f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ] {code} {nick} –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç.", exclude_user=user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({nick}) –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")

# ------------------------------------------------------------------------
# 7) –°–ú–ï–ù–ê –ù–ò–ö–ê (/nick)
# ------------------------------------------------------------------------
NICK_WAIT = range(1)

async def change_nick_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")
        return ConversationHandler.END

    await update.message.reply_text("[–ë–æ—Ç] –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫ (–Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤):")
    return NICK_WAIT

async def change_nick_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã —É–∂–µ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
        return ConversationHandler.END

    new_nick = update.message.text.strip()
    if len(new_nick) > 15:
        await update.message.reply_text("[–ë–æ—Ç] –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

    old_nick = active_users[user_id]["nickname"]
    code = active_users[user_id]["code"]

    active_users[user_id]["nickname"] = new_nick
    user_profiles[user_id]["nickname"] = new_nick

    await update.message.reply_text(f"[–ë–æ—Ç] –ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_nick}.")
    await broadcast_message(context.application, f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ] {code} {old_nick} —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω(–∞) –∫–∞–∫ {new_nick}.")
    refresh_user_activity(user_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {old_nick} -> {new_nick}.")
    return ConversationHandler.END

async def cancel_nick_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("[–ë–æ—Ç] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ------------------------------------------------------------------------
# 8) –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (/list) –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (/stats)
# ------------------------------------------------------------------------
async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not active_users:
        await update.message.reply_text("[–ë–æ—Ç] –í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")
        return

    total_possible = 100  # —à—É—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ
    lines = []
    now = datetime.datetime.now()

    for uid, info in active_users.items():
        seconds_diff = (now - info["last_active"]).total_seconds()
        # –°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if seconds_diff < 60:
            activity_icon = "üåï"
        elif seconds_diff < 300:
            activity_icon = "üåñ"
        elif seconds_diff < 900:
            activity_icon = "üåó"
        elif seconds_diff < 1800:
            activity_icon = "üåò"
        else:
            activity_icon = "üåë"
        role = determine_user_role(uid)
        lines.append(f"{activity_icon} [{role}] {info['code']} {info['nickname']}")
    text = f"[–ë–æ—Ç] –í —á–∞—Ç–µ {len(active_users)} (–∏–∑ {total_possible}):\n" + "\n".join(lines)
    await update.message.reply_text(text)
    refresh_user_activity(update.effective_user.id)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_users = len(user_profiles)
    active_count = len(active_users)
    await update.message.reply_text(f"[–ë–æ—Ç] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}")
    refresh_user_activity(update.effective_user.id)

# ------------------------------------------------------------------------
# 9) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å: /help, /rules, /about, /ping
# ------------------------------------------------------------------------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "[–ë–æ—Ç] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É\n"
        "/stop - –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç\n"
        "/nick - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫\n"
        "/list - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n"
        "/msg - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°\n"
        "/getmsg - –ü–æ–ª—É—á–∏—Ç—å –õ–°\n"
        "/hug - –û–±–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/search - –ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫—É\n"
        "/poll - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n"
        "/polldone - –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å\n"
        "/notify - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/report - –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n"
        "/rules - –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n"
        "/about - –û –±–æ—Ç–µ\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "–î–ª—è ¬´—Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞¬ª –Ω–∞—á–∏–Ω–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞ %."
    )
    await update.message.reply_text(help_text)
    refresh_user_activity(update.effective_user.id)

async def rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = (
        "[–ë–æ—Ç] –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n\n"
        "1. –°–æ–±–ª—é–¥–∞–π —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n"
        "2. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Å–ø–∞–º –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞.\n"
        "3. –†–µ–∫–ª–∞–º–∞, —Ñ–ª—É–¥ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã.\n"
        "4. –û–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞).\n"
        "5. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–µ—Ä—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è.\n\n"
        "–ù–∞—Ä—É—à–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã. –ë—É–¥—å –≤–µ–∂–ª–∏–≤!"
    )
    await update.message.reply_text(rules_text)
    refresh_user_activity(update.effective_user.id)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("[–ë–æ—Ç] –≠—Ç–æ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!")
    refresh_user_activity(update.effective_user.id)

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Pong!")
    refresh_user_activity(update.effective_user.id)

# ------------------------------------------------------------------------
# 10) –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (/msg, /getmsg)
# ------------------------------------------------------------------------
MSG_SELECT, MSG_TEXT = range(2)

async def dm_command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –í–≤–µ–¥–∏ /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: /msg CODE —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(context.args) >= 2:
        code = context.args[0]
        message_text = " ".join(context.args[1:])
        target_id = None
        for uid, data in active_users.items():
            if data["code"].lower() == code.lower():
                target_id = uid
                break
        if not target_id:
            await update.message.reply_text("[–ë–æ—Ç] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        from_nick = active_users[user_id]["nickname"]
        initialize_user_settings(target_id)
        direct_messages[target_id].append({"from": from_nick, "text": message_text})

        target_chat = active_users[target_id]["chat_id"]
        await context.application.bot.send_message(
            chat_id=target_chat,
            text=f"[–õ–° –æ—Ç {from_nick}]: {message_text}"
        )

        await update.message.reply_text(f"[–ë–æ—Ç] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {code}.")
        refresh_user_activity(user_id)
        return ConversationHandler.END

    # –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    kb = []
    row = []
    count = 0
    for uid, data in active_users.items():
        if uid == user_id:
            continue
        count += 1
        btn_label = f"{data['code']} {data['nickname']}"
        row.append(InlineKeyboardButton(btn_label, callback_data=f"dm_select|{uid}"))
        if count % 3 == 0:
            kb.append(row)
            row = []
    if row:
        kb.append(row)
    kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dm_cancel")])
    await update.message.reply_text(
        "[–ë–æ—Ç] –í—ã–±–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    refresh_user_activity(user_id)
    return MSG_SELECT

async def dm_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    parts = query.data.split("|")
    if len(parts) != 2:
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.")
        return ConversationHandler.END

    target_id = int(parts[1])
    context.user_data["dm_target"] = target_id

    target_info = active_users[target_id]
    await query.message.edit_text(
        f"[–ë–æ—Ç] –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {target_info['code']} {target_info['nickname']}:"
    )
    await query.answer()
    return MSG_TEXT

async def dm_text_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if "dm_target" not in context.user_data:
        await update.message.reply_text("[–ë–æ—Ç] –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å.")
        return ConversationHandler.END

    target_id = context.user_data["dm_target"]
    if target_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
        return ConversationHandler.END

    from_nick = active_users[user_id]["nickname"]
    message_text = update.message.text

    target_info = active_users[target_id]
    initialize_user_settings(target_id)
    direct_messages[target_id].append({"from": from_nick, "text": message_text})

    target_chat = target_info["chat_id"]
    await context.application.bot.send_message(
        chat_id=target_chat,
        text=f"[–õ–° –æ—Ç {from_nick}]: {message_text}"
    )

    await update.message.reply_text(f"[–ë–æ—Ç] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {target_info['code']} {target_info['nickname']}.")
    logging.info(f"–õ–°: {from_nick} -> {target_info['nickname']}: {message_text}")
    context.user_data.pop("dm_target", None)
    refresh_user_activity(user_id)
    return ConversationHandler.END

async def dm_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –õ–° –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await query.answer()
    return ConversationHandler.END

async def get_dm_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return

    initialize_user_settings(user_id)
    messages = direct_messages[user_id]
    if not messages:
        await update.message.reply_text("[–ë–æ—Ç] –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    lines = [f"–û—Ç {msg['from']}: {msg['text']}" for msg in messages]
    text = "[–ë–æ—Ç] –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n" + "\n".join(lines)
    await update.message.reply_text(text)
    refresh_user_activity(user_id)

# ------------------------------------------------------------------------
# 11) –û–±–Ω–∏–º–∞—à–∫–∏ (/hug)
# ------------------------------------------------------------------------
HUG_SELECT = range(1)

async def hug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–∞–∫: /hug CODE
    if context.args:
        code = context.args[0]
        target_id = None
        for uid, data in active_users.items():
            if data["code"].lower() == code.lower():
                target_id = uid
                break
        if not target_id:
            await update.message.reply_text("[–ë–æ—Ç] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        from_info = active_users[user_id]
        to_info = active_users[target_id]
        msg = f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ] {from_info['code']} {from_info['nickname']} –æ–±–Ω—è–ª(–∞) {to_info['nickname']}!"
        await broadcast_message(context.application, msg)
        refresh_user_activity(user_id)
        return ConversationHandler.END

    # Inline –≤—ã–±–æ—Ä –æ–±–Ω–∏–º–∞–µ–º–æ–≥–æ
    kb = []
    row = []
    count = 0
    for uid, data in active_users.items():
        if uid == user_id:
            continue
        count += 1
        btn_label = f"{data['code']} {data['nickname']}"
        row.append(InlineKeyboardButton(btn_label, callback_data=f"hug_select|{uid}"))
        if count % 3 == 0:
            kb.append(row)
            row = []
    if row:
        kb.append(row)
    kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="hug_cancel")])
    await update.message.reply_text(
        "[–ë–æ—Ç] –í—ã–±–µ—Ä–∏, –∫–æ–≥–æ –æ–±–Ω—è—Ç—å:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    refresh_user_activity(user_id)
    return HUG_SELECT

async def hug_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    parts = query.data.split("|")
    if len(parts) != 2:
        await query.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.")
        return ConversationHandler.END

    target_id = int(parts[1])
    from_info = active_users[user_id]
    to_info = active_users[target_id]
    msg = f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ] {from_info['code']} {from_info['nickname']} –æ–±–Ω–∏–º–∞–µ—Ç {to_info['nickname']}!"
    await broadcast_message(context.application, msg)
    await query.message.edit_text("–û–±–Ω–∏–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await query.answer()
    refresh_user_activity(user_id)
    return ConversationHandler.END

async def hug_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text("–û–±–Ω–∏–º–∞—à–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await query.answer()
    return ConversationHandler.END

# ------------------------------------------------------------------------
# 12) –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É (/search)
# ------------------------------------------------------------------------
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return

    if not context.args:
        await update.message.reply_text("[–ë–æ—Ç] –ò—Å–ø–æ–ª—å–∑—É–π: /search <—Ç–µ–∫—Å—Ç>")
        return

    pattern = " ".join(context.args).lower()
    results = []
    for data in active_users.values():
        if pattern in data["nickname"].lower():
            results.append(f"{data['code']} {data['nickname']}")
    if results:
        await update.message.reply_text("[–ë–æ—Ç] –ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(results))
    else:
        await update.message.reply_text("[–ë–æ—Ç] –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    refresh_user_activity(user_id)

# ------------------------------------------------------------------------
# 13) –û–ø—Ä–æ—Å—ã (/poll –∏ /polldone)
# ------------------------------------------------------------------------
POLL_WAIT = range(1)

async def poll_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return ConversationHandler.END

    await update.message.reply_text(
        "[–ë–æ—Ç] –°–æ–∑–¥–∞—ë–º –æ–ø—Ä–æ—Å.\n"
        "–í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ö–∞–∫ –¥–µ–ª–∞?\n"
        "–•–æ—Ä–æ—à–æ\n"
        "–ù–æ—Ä–º–∞–ª—å–Ω–æ\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    refresh_user_activity(user_id)
    return POLL_WAIT

async def poll_receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        return ConversationHandler.END

    text = update.message.text.strip()
    lines = text.split("\n")
    if len(lines) < 2:
        await update.message.reply_text("[–ë–æ—Ç] –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

    question = lines[0]
    options = lines[1:]
    active_polls[user_id] = {
        "question": question,
        "options": options,
        "votes": {opt: set() for opt in options},
        "active": True,
        "msg_ids": {},
        "chat_ids": {}
    }

    from_info = active_users[user_id]
    header = f"[–û–ø—Ä–æ—Å –æ—Ç {from_info['code']} {from_info['nickname']}]:\n{question}"

    def build_poll_markup(creator_id):
        kb = []
        for idx, option in enumerate(options, start=1):
            btn_text = f"{idx} - {option}"
            kb.append([InlineKeyboardButton(btn_text, callback_data=f"pollvote|{creator_id}|{idx}")])
        return InlineKeyboardMarkup(kb)

    markup = build_poll_markup(user_id)
    for uid, data in active_users.items():
        try:
            msg = await context.application.bot.send_message(
                chat_id=data["chat_id"],
                text=header,
                reply_markup=markup
            )
            active_polls[user_id]["msg_ids"][uid] = msg.message_id
            active_polls[user_id]["chat_ids"][uid] = data["chat_id"]
        except Exception as err:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è {data['nickname']}: {err}")
    refresh_user_activity(user_id)
    return ConversationHandler.END

async def poll_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("[–ë–æ—Ç] –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

async def poll_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_polls or not active_polls[user_id]["active"]:
        await update.message.reply_text("[–ë–æ—Ç] –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        return

    active_polls[user_id]["active"] = False
    await update.message.reply_text("[–ë–æ—Ç] –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    for uid, msg_id in active_polls[user_id]["msg_ids"].items():
        chat_id = active_polls[user_id]["chat_ids"][uid]
        try:
            await context.application.bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg_id, reply_markup=None)
        except Exception:
            pass
    refresh_user_activity(user_id)

async def poll_vote_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    parts = query.data.split("|")
    if len(parts) != 3 or parts[0] != "pollvote":
        await query.answer("–û—à–∏–±–∫–∞.")
        return

    creator_id = int(parts[1])
    option_index = int(parts[2]) - 1
    voter_id = update.effective_user.id

    if creator_id not in active_polls:
        await query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return
    poll = active_polls[creator_id]
    if not poll["active"]:
        await query.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return

    options = poll["options"]
    if option_index < 0 or option_index >= len(options):
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        return

    chosen = options[option_index]
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞
    for opt in options:
        poll["votes"][opt].discard(voter_id)
    poll["votes"][chosen].add(voter_id)
    await query.answer("–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    lines = [poll["question"]]
    for idx, opt in enumerate(options, start=1):
        count = len(poll["votes"][opt])
        mark = "‚úîÔ∏è" if count > 0 else f"{idx}"
        lines.append(f"{mark} - {opt} ({count})")
    new_text = "\n".join(lines)

    for uid, msg_id in poll["msg_ids"].items():
        chat_id = poll["chat_ids"][uid]
        try:
            await context.application.bot.edit_message_text(
                chat_id=chat_id,
                message_id=msg_id,
                text=new_text,
                reply_markup=query.message.reply_markup
            )
        except Exception as err:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è {uid}: {err}")
    refresh_user_activity(voter_id)

# ------------------------------------------------------------------------
# 14) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (/notify)
# ------------------------------------------------------------------------
def build_notify_markup(user_id: int):
    settings = notification_settings[user_id]
    def flag_text(flag: bool):
        return "‚úÖ" if flag else "‚ùå"
    kb = [
        [
            InlineKeyboardButton(f"{flag_text(settings['privates'])} –õ–∏—á–Ω—ã–µ", callback_data="notify|privates"),
            InlineKeyboardButton(f"{flag_text(settings['replies'])} –û—Ç–≤–µ—Ç—ã", callback_data="notify|replies"),
            InlineKeyboardButton(f"{flag_text(settings['hug'])} –û–±–Ω–∏–º–∞—à–∫–∏", callback_data="notify|hug")
        ]
    ]
    row = []
    for val in [0, 1, 5, 10, 20, 30]:
        mark = "‚úÖ" if settings["interval"] == val else "‚ùå"
        row.append(InlineKeyboardButton(f"{mark} {val}", callback_data=f"notify|interval|{val}"))
    kb.append(row)
    kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="notify|cancel")])
    return InlineKeyboardMarkup(kb)

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –¢—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return
    initialize_user_settings(user_id)
    kb = build_notify_markup(user_id)
    await update.message.reply_text("[–ë–æ—Ç] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)
    refresh_user_activity(user_id)

async def notify_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    parts = query.data.split("|")
    if parts[0] != "notify":
        return

    if len(parts) == 2:
        if parts[1] == "cancel":
            await query.message.delete()
            return
        key = parts[1]
        notification_settings[user_id][key] = not notification_settings[user_id][key]
    elif len(parts) == 3 and parts[1] == "interval":
        val = int(parts[2])
        notification_settings[user_id]["interval"] = val
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
        return

    new_kb = build_notify_markup(user_id)
    try:
        await query.message.edit_reply_markup(new_kb)
    except Exception:
        pass
    await query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    refresh_user_activity(user_id)

# ------------------------------------------------------------------------
# 15) –ñ–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (/report)
# ------------------------------------------------------------------------
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("[–ë–æ—Ç] –ò—Å–ø–æ–ª—å–∑—É–π: /report <–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    code = context.args[0]
    reason = " ".join(context.args[1:])
    offender_id = None
    for uid, data in active_users.items():
        if data["code"].lower() == code.lower():
            offender_id = uid
            break
    if not offender_id:
        await update.message.reply_text("[–ë–æ—Ç] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    from_nick = active_users[user_id]["nickname"]
    reported_messages.append({
        "reporter": from_nick,
        "offender": active_users[offender_id]["nickname"],
        "reason": reason,
        "time": datetime.datetime.now()
    })
    await update.message.reply_text("[–ë–æ—Ç] –¢–≤–æ—è –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é.")
    logging.info(f"–ñ–∞–ª–æ–±–∞ –æ—Ç {from_nick} –Ω–∞ {active_users[offender_id]['nickname']}: {reason}")
    refresh_user_activity(user_id)

# ------------------------------------------------------------------------
# 16) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ)
# ------------------------------------------------------------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_users:
        await update.message.reply_text("[–ë–æ—Ç] –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏ /start.")
        return

    nick = active_users[user_id]["nickname"]
    code = active_users[user_id]["code"]

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
    if update.message.photo:
        photo = update.message.photo[-1]
        file_id = photo.file_id
        caption = update.message.caption if update.message.caption else ""
        full_caption = f"{code} {nick} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ñ–æ—Ç–æ"
        if caption:
            full_caption += f"\n{caption}"
        await broadcast_image(context.application, file_id, caption=full_caption, exclude_user=user_id)
        refresh_user_activity(user_id)
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = update.message.text.strip()
    replied_nick = ""
    if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.application.bot.id:
        replied_nick = extract_replied_nickname(update.message.reply_to_message.text)

    if text.startswith("%"):
        content = text[1:].lstrip()
        final_text = f"{nick} (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ {replied_nick}) {content}" if replied_nick else f"{nick} {content}"
        await broadcast_message(context.application, final_text, exclude_user=user_id)
    else:
        final_text = f"{nick} (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ {replied_nick}): {text}" if replied_nick else f"{nick}: {text}"
        await broadcast_message(context.application, final_text, exclude_user=user_id)
    refresh_user_activity(user_id)

# ------------------------------------------------------------------------
# 17) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–º–µ–Ω—é)
# ------------------------------------------------------------------------
async def set_commands(app_bot):
    cmds = [
        BotCommand("start", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É"),
        BotCommand("stop", "–ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç"),
        BotCommand("nick", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫"),
        BotCommand("list", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞"),
        BotCommand("msg", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°"),
        BotCommand("getmsg", "–ü–æ–ª—É—á–∏—Ç—å –õ–°"),
        BotCommand("hug", "–û–±–Ω—è—Ç—å"),
        BotCommand("search", "–ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫—É"),
        BotCommand("poll", "–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"),
        BotCommand("polldone", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å"),
        BotCommand("notify", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        BotCommand("report", "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞"),
        BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞"),
        BotCommand("about", "–û –±–æ—Ç–µ"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
    ]
    await app_bot.bot.set_my_commands(cmds)

async def post_init(app_bot):
    await set_commands(app_bot)

# ------------------------------------------------------------------------
# 18) –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ------------------------------------------------------------------------
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
    start_keep_alive()

    # –°–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # ConversationHandler –¥–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞
    nick_conv = ConversationHandler(
        entry_points=[CommandHandler("nick", change_nick_start)],
        states={
            NICK_WAIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_nick_process)]
        },
        fallbacks=[CommandHandler("cancel", cancel_nick_change)]
    )

    # ConversationHandler –¥–ª—è –õ–° (/msg)
    dm_conv = ConversationHandler(
        entry_points=[CommandHandler("msg", dm_command_start)],
        states={
            MSG_SELECT: [
                CallbackQueryHandler(dm_select_callback, pattern="^dm_select\\|"),
                CallbackQueryHandler(dm_cancel_callback, pattern="^dm_cancel$")
            ],
            MSG_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, dm_text_receive)]
        },
        fallbacks=[CallbackQueryHandler(dm_cancel_callback, pattern="^dm_cancel$")]
    )

    # ConversationHandler –¥–ª—è –æ–ø—Ä–æ—Å–∞ (/poll)
    poll_conv = ConversationHandler(
        entry_points=[CommandHandler("poll", poll_command)],
        states={
            POLL_WAIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, poll_receive_text)]
        },
        fallbacks=[CommandHandler("cancel", poll_cancel)]
    )

    # ConversationHandler –¥–ª—è –æ–±–Ω–∏–º–∞—à–µ–∫ (/hug)
    hug_conv = ConversationHandler(
        entry_points=[CommandHandler("hug", hug_command)],
        states={
            HUG_SELECT: [
                CallbackQueryHandler(hug_select_callback, pattern="^hug_select\\|"),
                CallbackQueryHandler(hug_cancel_callback, pattern="^hug_cancel$")
            ]
        },
        fallbacks=[CallbackQueryHandler(hug_cancel_callback, pattern="^hug_cancel$")]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(nick_conv)
    application.add_handler(CommandHandler("list", list_users_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", rules_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("ping", ping_command))
    application.add_handler(dm_conv)
    application.add_handler(CommandHandler("getmsg", get_dm_command))
    application.add_handler(hug_conv)
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(poll_conv)
    application.add_handler(CommandHandler("polldone", poll_finish))
    application.add_handler(CommandHandler("notify", notify_command))
    application.add_handler(CallbackQueryHandler(notify_callback, pattern="^notify\\|"))
    application.add_handler(CallbackQueryHandler(poll_vote_callback, pattern="^pollvote\\|"))
    application.add_handler(CommandHandler("report", report_command))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ)
    application.add_handler(MessageHandler(~filters.COMMAND & (filters.TEXT | filters.PHOTO), handle_message))

    # post_init –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    application.post_init = post_init

    # –ó–∞–ø—É—Å–∫ polling
    application.run_polling()

if __name__ == "__main__":
    main()
